name: 'Workflow'

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  api_unit_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          coverage: 'xdebug'
          php-version: 8.4
        env:
          fail-fast: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: '~/.cache/composer'
          key: "cache-composer-${{ hashFiles('**/app/composer.lock') }}"
          restore-keys: 'cache-composer-'

      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Run unit tests
        run: composer run tests:unit:ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./reports/coverage.xml
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./reports/junit-unittests.xml

  lint_docker_compose:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: lint docker-compose.yml
        run: docker compose config

  security_checks:
    name: security-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: The PHP Security Checker
        uses: symfonycorp/security-checker-action@v5
        id: security-check
        with:
          lock: composer.lock

  static_analysis:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check_command: ['lint:composer', 'lint:php', 'phpstan']
        php_version: ['8.4']
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          coverage: 'xdebug'
          php-version: ${{ matrix.php_version }}
        env:
          fail-fast: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: '~/.cache/composer'
          key: "cache-composer-${{ hashFiles('**/app/composer.lock') }}"
          restore-keys: 'cache-composer-'

      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Run ${{ matrix.check_command }}
        run: composer run ${{ matrix.check_command }}

  api_tests:
    runs-on: ubuntu-latest
    needs:
      - static_analysis
      - security_checks
      - api_unit_tests
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: symfony
          MYSQL_DATABASE: symfony
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          extensions: mbstring, xml, ctype, iconv, intl, mysqli, pdo, pdo_mysql, posix, pcntl, mysql
          coverage: 'xdebug'
          php-version: 8.4
        env:
          fail-fast: true

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Prepare database
        run: composer run db:recreate:test
        env:
          DATABASE_URL: mysql://root:symfony@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony?serverVersion=8.2

      - name: Create JWT
        run: php bin/console lexik:jwt:generate-keypair --skip-if-exists

      - name: Run api tests
        env:
          DATABASE_URL: mysql://root:symfony@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony?serverVersion=8.2
        run: composer run tests:api:ci

  build_api:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs:
      - static_analysis
      - security_checks
      - api_unit_tests
      - api_tests
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.REGISTRY_TOKEN}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          target: build_prod
          push: true
          tags: ghcr.io/var-lab-it/opencal:api-latest-unstable

  build_api_nginx:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs:
      - static_analysis
      - security_checks
      - api_unit_tests
      - api_tests
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.REGISTRY_TOKEN}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          target: nginx
          push: true
          tags: ghcr.io/var-lab-it/opencal:api-nginx-latest-unstable
